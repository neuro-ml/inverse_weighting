import numpy as np
import torch

from dpipe.predict.shape import divisible_shape, add_extract_dims
from dpipe.predict.shape import patches_grid
from dpipe.torch import inference_step
from iw.model.unet import get_unet


architecture = get_unet(n_chans_in, n_chans_out)


# PREDICT
patch_size = np.array([160] * 3)
patch_stride = np.array([144] * 3)


@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[8] * 3, padding_values=np.min)
def predict(x):
    return inference_step(x, architecture=architecture, activation=torch.sigmoid)


@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[8] * 3, padding_values=np.min)
def predict_logit(x):
    return inference_step(x, architecture=architecture)

